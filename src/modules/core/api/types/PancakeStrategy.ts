/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface PancakeStrategy extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PancakeStrategy;
  clone(): PancakeStrategy;
  methods: {
    MIN_EARN_AMOUNT_LL(): NonPayableTransactionObject<string>;

    SLIPPAGE_FACTOR_MAX(): NonPayableTransactionObject<string>;

    SLIPPAGE_FACTOR_UL(): NonPayableTransactionObject<string>;

    cake(): NonPayableTransactionObject<string>;

    deposit(
      arg0: string,
      _wantAmt: number | string | BN
    ): NonPayableTransactionObject<string>;

    earnedToToken0Path(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    earnedToToken1Path(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    enableAutoHarvest(): NonPayableTransactionObject<boolean>;

    farmContractAddress(): NonPayableTransactionObject<string>;

    helioFarming(): NonPayableTransactionObject<string>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: number | string | BN,
      _to: string
    ): NonPayableTransactionObject<void>;

    initialize(
      _minEarnAmount: number | string | BN,
      _enableAutoHarvest: boolean,
      _addresses: string[],
      _earnedToToken0Path: string[],
      _earnedToToken1Path: string[]
    ): NonPayableTransactionObject<void>;

    minEarnAmount(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    pid(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    router(): NonPayableTransactionObject<string>;

    sharesTotal(): NonPayableTransactionObject<string>;

    slippageFactor(): NonPayableTransactionObject<string>;

    token0(): NonPayableTransactionObject<string>;

    token1(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    want(): NonPayableTransactionObject<string>;

    wantLockedTotal(): NonPayableTransactionObject<string>;

    withdraw(
      arg0: string,
      _wantAmt: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
