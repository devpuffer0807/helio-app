/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddLiquidity = ContractEventLog<{
  provider: string;
  token_amounts: string[];
  fees: string[];
  invariant: string;
  token_supply: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
  4: string;
}>;
export type CommitNewFee = ContractEventLog<{
  deadline: string;
  fee: string;
  admin_fee: string;
  0: string;
  1: string;
  2: string;
}>;
export type DonateAdminFees = ContractEventLog<{}>;
export type Kill = ContractEventLog<{}>;
export type NewFee = ContractEventLog<{
  fee: string;
  admin_fee: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RampA = ContractEventLog<{
  old_A: string;
  new_A: string;
  initial_time: string;
  future_time: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RemoveLiquidity = ContractEventLog<{
  provider: string;
  token_amounts: string[];
  fees: string[];
  token_supply: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
}>;
export type RemoveLiquidityImbalance = ContractEventLog<{
  provider: string;
  token_amounts: string[];
  fees: string[];
  invariant: string;
  token_supply: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
  4: string;
}>;
export type RemoveLiquidityOne = ContractEventLog<{
  provider: string;
  index: string;
  token_amount: string;
  coin_amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RevertParameters = ContractEventLog<{}>;
export type StopRampA = ContractEventLog<{
  A: string;
  t: string;
  0: string;
  1: string;
}>;
export type TokenExchange = ContractEventLog<{
  buyer: string;
  sold_id: string;
  tokens_sold: string;
  bought_id: string;
  tokens_bought: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Unkill = ContractEventLog<{}>;

export interface StableSwap extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StableSwap;
  clone(): StableSwap;
  methods: {
    A(): NonPayableTransactionObject<string>;

    ADMIN_ACTIONS_DELAY(): NonPayableTransactionObject<string>;

    FEE_DENOMINATOR(): NonPayableTransactionObject<string>;

    KILL_DEADLINE_DT(): NonPayableTransactionObject<string>;

    MAX_A(): NonPayableTransactionObject<string>;

    MAX_ADMIN_FEE(): NonPayableTransactionObject<string>;

    MAX_A_CHANGE(): NonPayableTransactionObject<string>;

    MAX_DECIMAL(): NonPayableTransactionObject<string>;

    MAX_FEE(): NonPayableTransactionObject<string>;

    MIN_RAMP_TIME(): NonPayableTransactionObject<string>;

    N_COINS(): NonPayableTransactionObject<string>;

    PRECISION(): NonPayableTransactionObject<string>;

    PRECISION_MUL(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    RATES(arg0: number | string | BN): NonPayableTransactionObject<string>;

    STABLESWAP_FACTORY(): NonPayableTransactionObject<string>;

    add_liquidity(
      amounts: (number | string | BN)[],
      min_mint_amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    admin_actions_deadline(): NonPayableTransactionObject<string>;

    admin_balances(
      i: number | string | BN
    ): NonPayableTransactionObject<string>;

    admin_fee(): NonPayableTransactionObject<string>;

    apply_new_fee(): NonPayableTransactionObject<void>;

    balances(arg0: number | string | BN): NonPayableTransactionObject<string>;

    calc_token_amount(
      amounts: (number | string | BN)[],
      deposit: boolean
    ): NonPayableTransactionObject<string>;

    calc_withdraw_one_coin(
      _token_amount: number | string | BN,
      i: number | string | BN
    ): NonPayableTransactionObject<string>;

    coins(arg0: number | string | BN): NonPayableTransactionObject<string>;

    commit_new_fee(
      new_fee: number | string | BN,
      new_admin_fee: number | string | BN
    ): NonPayableTransactionObject<void>;

    donate_admin_fees(): NonPayableTransactionObject<void>;

    exchange(
      i: number | string | BN,
      j: number | string | BN,
      dx: number | string | BN,
      min_dy: number | string | BN
    ): NonPayableTransactionObject<void>;

    fee(): NonPayableTransactionObject<string>;

    future_A(): NonPayableTransactionObject<string>;

    future_A_time(): NonPayableTransactionObject<string>;

    future_admin_fee(): NonPayableTransactionObject<string>;

    future_fee(): NonPayableTransactionObject<string>;

    get_dy(
      i: number | string | BN,
      j: number | string | BN,
      dx: number | string | BN
    ): NonPayableTransactionObject<string>;

    get_dy_underlying(
      i: number | string | BN,
      j: number | string | BN,
      dx: number | string | BN
    ): NonPayableTransactionObject<string>;

    get_virtual_price(): NonPayableTransactionObject<string>;

    initial_A(): NonPayableTransactionObject<string>;

    initial_A_time(): NonPayableTransactionObject<string>;

    initialize(
      _coins: string[],
      _A: number | string | BN,
      _fee: number | string | BN,
      _admin_fee: number | string | BN,
      _owner: string
    ): NonPayableTransactionObject<void>;

    isInitialized(): NonPayableTransactionObject<boolean>;

    is_killed(): NonPayableTransactionObject<boolean>;

    kill_deadline(): NonPayableTransactionObject<string>;

    kill_me(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    ramp_A(
      _future_A: number | string | BN,
      _future_time: number | string | BN
    ): NonPayableTransactionObject<void>;

    remove_liquidity(
      _amount: number | string | BN,
      min_amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    remove_liquidity_imbalance(
      amounts: (number | string | BN)[],
      max_burn_amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    remove_liquidity_one_coin(
      _token_amount: number | string | BN,
      i: number | string | BN,
      min_amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    revert_new_parameters(): NonPayableTransactionObject<void>;

    stop_rampget_A(): NonPayableTransactionObject<void>;

    token(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unkill_me(): NonPayableTransactionObject<void>;

    withdraw_admin_fees(): NonPayableTransactionObject<void>;
  };
  events: {
    AddLiquidity(cb?: Callback<AddLiquidity>): EventEmitter;
    AddLiquidity(
      options?: EventOptions,
      cb?: Callback<AddLiquidity>
    ): EventEmitter;

    CommitNewFee(cb?: Callback<CommitNewFee>): EventEmitter;
    CommitNewFee(
      options?: EventOptions,
      cb?: Callback<CommitNewFee>
    ): EventEmitter;

    DonateAdminFees(cb?: Callback<DonateAdminFees>): EventEmitter;
    DonateAdminFees(
      options?: EventOptions,
      cb?: Callback<DonateAdminFees>
    ): EventEmitter;

    Kill(cb?: Callback<Kill>): EventEmitter;
    Kill(options?: EventOptions, cb?: Callback<Kill>): EventEmitter;

    NewFee(cb?: Callback<NewFee>): EventEmitter;
    NewFee(options?: EventOptions, cb?: Callback<NewFee>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RampA(cb?: Callback<RampA>): EventEmitter;
    RampA(options?: EventOptions, cb?: Callback<RampA>): EventEmitter;

    RemoveLiquidity(cb?: Callback<RemoveLiquidity>): EventEmitter;
    RemoveLiquidity(
      options?: EventOptions,
      cb?: Callback<RemoveLiquidity>
    ): EventEmitter;

    RemoveLiquidityImbalance(
      cb?: Callback<RemoveLiquidityImbalance>
    ): EventEmitter;
    RemoveLiquidityImbalance(
      options?: EventOptions,
      cb?: Callback<RemoveLiquidityImbalance>
    ): EventEmitter;

    RemoveLiquidityOne(cb?: Callback<RemoveLiquidityOne>): EventEmitter;
    RemoveLiquidityOne(
      options?: EventOptions,
      cb?: Callback<RemoveLiquidityOne>
    ): EventEmitter;

    RevertParameters(cb?: Callback<RevertParameters>): EventEmitter;
    RevertParameters(
      options?: EventOptions,
      cb?: Callback<RevertParameters>
    ): EventEmitter;

    StopRampA(cb?: Callback<StopRampA>): EventEmitter;
    StopRampA(options?: EventOptions, cb?: Callback<StopRampA>): EventEmitter;

    TokenExchange(cb?: Callback<TokenExchange>): EventEmitter;
    TokenExchange(
      options?: EventOptions,
      cb?: Callback<TokenExchange>
    ): EventEmitter;

    Unkill(cb?: Callback<Unkill>): EventEmitter;
    Unkill(options?: EventOptions, cb?: Callback<Unkill>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddLiquidity", cb: Callback<AddLiquidity>): void;
  once(
    event: "AddLiquidity",
    options: EventOptions,
    cb: Callback<AddLiquidity>
  ): void;

  once(event: "CommitNewFee", cb: Callback<CommitNewFee>): void;
  once(
    event: "CommitNewFee",
    options: EventOptions,
    cb: Callback<CommitNewFee>
  ): void;

  once(event: "DonateAdminFees", cb: Callback<DonateAdminFees>): void;
  once(
    event: "DonateAdminFees",
    options: EventOptions,
    cb: Callback<DonateAdminFees>
  ): void;

  once(event: "Kill", cb: Callback<Kill>): void;
  once(event: "Kill", options: EventOptions, cb: Callback<Kill>): void;

  once(event: "NewFee", cb: Callback<NewFee>): void;
  once(event: "NewFee", options: EventOptions, cb: Callback<NewFee>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RampA", cb: Callback<RampA>): void;
  once(event: "RampA", options: EventOptions, cb: Callback<RampA>): void;

  once(event: "RemoveLiquidity", cb: Callback<RemoveLiquidity>): void;
  once(
    event: "RemoveLiquidity",
    options: EventOptions,
    cb: Callback<RemoveLiquidity>
  ): void;

  once(
    event: "RemoveLiquidityImbalance",
    cb: Callback<RemoveLiquidityImbalance>
  ): void;
  once(
    event: "RemoveLiquidityImbalance",
    options: EventOptions,
    cb: Callback<RemoveLiquidityImbalance>
  ): void;

  once(event: "RemoveLiquidityOne", cb: Callback<RemoveLiquidityOne>): void;
  once(
    event: "RemoveLiquidityOne",
    options: EventOptions,
    cb: Callback<RemoveLiquidityOne>
  ): void;

  once(event: "RevertParameters", cb: Callback<RevertParameters>): void;
  once(
    event: "RevertParameters",
    options: EventOptions,
    cb: Callback<RevertParameters>
  ): void;

  once(event: "StopRampA", cb: Callback<StopRampA>): void;
  once(
    event: "StopRampA",
    options: EventOptions,
    cb: Callback<StopRampA>
  ): void;

  once(event: "TokenExchange", cb: Callback<TokenExchange>): void;
  once(
    event: "TokenExchange",
    options: EventOptions,
    cb: Callback<TokenExchange>
  ): void;

  once(event: "Unkill", cb: Callback<Unkill>): void;
  once(event: "Unkill", options: EventOptions, cb: Callback<Unkill>): void;
}
