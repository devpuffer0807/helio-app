/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Add = ContractEventLog<{
  _allocPoint: string;
  _stakingToken: string;
  _rewarder: string;
  0: string;
  1: string;
  2: string;
}>;
export type CompounderUpated = ContractEventLog<{
  _newCompounder: string;
  _oldCompounder: string;
  0: string;
  1: string;
}>;
export type Deposit = ContractEventLog<{
  _user: string;
  _stakingToken: string;
  _amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type DepositNotAvailable = ContractEventLog<{
  _user: string;
  _stakingToken: string;
  _amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  _user: string;
  _stakingToken: string;
  _amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type HarvestMGP = ContractEventLog<{
  _account: string;
  _receiver: string;
  _amount: string;
  isLock: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type LockFreePoolUpdated = ContractEventLog<{
  _stakingToken: string;
  _isRewardMGP: boolean;
  0: string;
  1: boolean;
}>;
export type MGPSet = ContractEventLog<{
  _mgp: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type PoolManagerStatus = ContractEventLog<{
  _account: string;
  _status: boolean;
  0: string;
  1: boolean;
}>;
export type Set = ContractEventLog<{
  _stakingToken: string;
  _allocPoint: string;
  _rewarder: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type UpdateEmissionRate = ContractEventLog<{
  _user: string;
  _oldMgpPerSec: string;
  _newMgpPerSec: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdatePool = ContractEventLog<{
  _stakingToken: string;
  _lastRewardTimestamp: string;
  _lpSupply: string;
  _accMGPPerShare: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type VLMGPUpdated = ContractEventLog<{
  _newVlmgp: string;
  _oldVlmgp: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  _user: string;
  _stakingToken: string;
  _amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MagpieMaster extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MagpieMaster;
  clone(): MagpieMaster;
  methods: {
    MPGRewardPool(arg0: string): NonPayableTransactionObject<boolean>;

    PoolManagers(arg0: string): NonPayableTransactionObject<boolean>;

    __MasterMagpie_init(
      _mgp: string,
      _mgpPerSec: number | string | BN,
      _startTimestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    add(
      _allocPoint: number | string | BN,
      _stakingToken: string,
      _rewarder: string,
      _helper: string,
      _helperNeedsHarvest: boolean
    ): NonPayableTransactionObject<void>;

    allPendingTokens(
      _stakingToken: string,
      _user: string
    ): NonPayableTransactionObject<{
      pendingMGP: string;
      bonusTokenAddresses: string[];
      bonusTokenSymbols: string[];
      pendingBonusRewards: string[];
      0: string;
      1: string[];
      2: string[];
      3: string[];
    }>;

    compounder(): NonPayableTransactionObject<string>;

    createRewarder(
      _stakingToken: string,
      mainRewardToken: string
    ): NonPayableTransactionObject<string>;

    deposit(
      _stakingToken: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositFor(
      _stakingToken: string,
      _amount: number | string | BN,
      _for: string
    ): NonPayableTransactionObject<void>;

    depositVlMGPFor(
      _amount: number | string | BN,
      _for: string
    ): NonPayableTransactionObject<void>;

    emergencyWithdraw(_stakingToken: string): NonPayableTransactionObject<void>;

    getPoolInfo(_stakingToken: string): NonPayableTransactionObject<{
      emission: string;
      allocpoint: string;
      sizeOfPool: string;
      totalPoint: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    massUpdatePools(): NonPayableTransactionObject<void>;

    mgp(): NonPayableTransactionObject<string>;

    mgpPerSec(): NonPayableTransactionObject<string>;

    multiclaim(_stakingTokens: string[]): NonPayableTransactionObject<void>;

    multiclaimOnBehalf(
      _stakingTokens: string[],
      _account: string
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    pendingTokens(
      _stakingToken: string,
      _user: string,
      _rewardToken: string
    ): NonPayableTransactionObject<{
      pendingMGP: string;
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      pendingBonusToken: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    registeredToken(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewarderBonusTokenInfo(_stakingToken: string): NonPayableTransactionObject<{
      bonusTokenAddresses: string[];
      bonusTokenSymbols: string[];
      0: string[];
      1: string[];
    }>;

    set(
      _stakingToken: string,
      _allocPoint: number | string | BN,
      _helper: string,
      _rewarder: string,
      _helperNeedsHarvest: boolean
    ): NonPayableTransactionObject<void>;

    setCompounder(_compounder: string): NonPayableTransactionObject<void>;

    setMGPRewardPools(
      _stakingToken: string,
      _isLockFree: boolean
    ): NonPayableTransactionObject<void>;

    setMgp(_mgp: string): NonPayableTransactionObject<void>;

    setPoolManagerStatus(
      _account: string,
      _allowedManager: boolean
    ): NonPayableTransactionObject<void>;

    setVlmgp(_vlmgp: string): NonPayableTransactionObject<void>;

    stakingInfo(
      _stakingToken: string,
      _user: string
    ): NonPayableTransactionObject<{
      stakedAmount: string;
      availableAmount: string;
      0: string;
      1: string;
    }>;

    startTimestamp(): NonPayableTransactionObject<string>;

    tokenToPoolInfo(arg0: string): NonPayableTransactionObject<{
      stakingToken: string;
      allocPoint: string;
      lastRewardTimestamp: string;
      accMGPPerShare: string;
      rewarder: string;
      helper: string;
      helperNeedsHarvest: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    totalAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    updateEmissionRate(
      _mgpPerSec: number | string | BN
    ): NonPayableTransactionObject<void>;

    updatePool(_stakingToken: string): NonPayableTransactionObject<void>;

    vlmgp(): NonPayableTransactionObject<string>;

    withdraw(
      _stakingToken: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawFor(
      _stakingToken: string,
      _amount: number | string | BN,
      _for: string
    ): NonPayableTransactionObject<void>;

    withdrawVlMGPFor(
      _amount: number | string | BN,
      _for: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Add(cb?: Callback<Add>): EventEmitter;
    Add(options?: EventOptions, cb?: Callback<Add>): EventEmitter;

    CompounderUpated(cb?: Callback<CompounderUpated>): EventEmitter;
    CompounderUpated(
      options?: EventOptions,
      cb?: Callback<CompounderUpated>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    DepositNotAvailable(cb?: Callback<DepositNotAvailable>): EventEmitter;
    DepositNotAvailable(
      options?: EventOptions,
      cb?: Callback<DepositNotAvailable>
    ): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    HarvestMGP(cb?: Callback<HarvestMGP>): EventEmitter;
    HarvestMGP(options?: EventOptions, cb?: Callback<HarvestMGP>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    LockFreePoolUpdated(cb?: Callback<LockFreePoolUpdated>): EventEmitter;
    LockFreePoolUpdated(
      options?: EventOptions,
      cb?: Callback<LockFreePoolUpdated>
    ): EventEmitter;

    MGPSet(cb?: Callback<MGPSet>): EventEmitter;
    MGPSet(options?: EventOptions, cb?: Callback<MGPSet>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    PoolManagerStatus(cb?: Callback<PoolManagerStatus>): EventEmitter;
    PoolManagerStatus(
      options?: EventOptions,
      cb?: Callback<PoolManagerStatus>
    ): EventEmitter;

    Set(cb?: Callback<Set>): EventEmitter;
    Set(options?: EventOptions, cb?: Callback<Set>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    UpdateEmissionRate(cb?: Callback<UpdateEmissionRate>): EventEmitter;
    UpdateEmissionRate(
      options?: EventOptions,
      cb?: Callback<UpdateEmissionRate>
    ): EventEmitter;

    UpdatePool(cb?: Callback<UpdatePool>): EventEmitter;
    UpdatePool(options?: EventOptions, cb?: Callback<UpdatePool>): EventEmitter;

    VLMGPUpdated(cb?: Callback<VLMGPUpdated>): EventEmitter;
    VLMGPUpdated(
      options?: EventOptions,
      cb?: Callback<VLMGPUpdated>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Add", cb: Callback<Add>): void;
  once(event: "Add", options: EventOptions, cb: Callback<Add>): void;

  once(event: "CompounderUpated", cb: Callback<CompounderUpated>): void;
  once(
    event: "CompounderUpated",
    options: EventOptions,
    cb: Callback<CompounderUpated>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "DepositNotAvailable", cb: Callback<DepositNotAvailable>): void;
  once(
    event: "DepositNotAvailable",
    options: EventOptions,
    cb: Callback<DepositNotAvailable>
  ): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "HarvestMGP", cb: Callback<HarvestMGP>): void;
  once(
    event: "HarvestMGP",
    options: EventOptions,
    cb: Callback<HarvestMGP>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "LockFreePoolUpdated", cb: Callback<LockFreePoolUpdated>): void;
  once(
    event: "LockFreePoolUpdated",
    options: EventOptions,
    cb: Callback<LockFreePoolUpdated>
  ): void;

  once(event: "MGPSet", cb: Callback<MGPSet>): void;
  once(event: "MGPSet", options: EventOptions, cb: Callback<MGPSet>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "PoolManagerStatus", cb: Callback<PoolManagerStatus>): void;
  once(
    event: "PoolManagerStatus",
    options: EventOptions,
    cb: Callback<PoolManagerStatus>
  ): void;

  once(event: "Set", cb: Callback<Set>): void;
  once(event: "Set", options: EventOptions, cb: Callback<Set>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "UpdateEmissionRate", cb: Callback<UpdateEmissionRate>): void;
  once(
    event: "UpdateEmissionRate",
    options: EventOptions,
    cb: Callback<UpdateEmissionRate>
  ): void;

  once(event: "UpdatePool", cb: Callback<UpdatePool>): void;
  once(
    event: "UpdatePool",
    options: EventOptions,
    cb: Callback<UpdatePool>
  ): void;

  once(event: "VLMGPUpdated", cb: Callback<VLMGPUpdated>): void;
  once(
    event: "VLMGPUpdated",
    options: EventOptions,
    cb: Callback<VLMGPUpdated>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
