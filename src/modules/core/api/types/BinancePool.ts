/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BondContractChanged = ContractEventLog<{
  bondContract: string;
  0: string;
}>;
export type CertContractChanged = ContractEventLog<{
  bondContract: string;
  0: string;
}>;
export type DistributeGasLeftChanged = ContractEventLog<{
  gasLeft: string;
  0: string;
}>;
export type FailedStakesWithdrawn = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type IntermediaryChanged = ContractEventLog<{
  intermediary: string;
  0: string;
}>;
export type ManualDistributeExpected = ContractEventLog<{
  claimer: string;
  amount: string;
  id: string;
  0: string;
  1: string;
  2: string;
}>;
export type MinimalStakeChanged = ContractEventLog<{
  minStake: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type PendingGapReseted = ContractEventLog<{}>;
export type Received = ContractEventLog<{
  from: string;
  amount: string;
  0: string;
  1: string;
}>;
export type ReferralCode = ContractEventLog<{
  code: string;
  0: string;
}>;
export type RewardsDistributed = ContractEventLog<{
  claimers: string[];
  amounts: string[];
  missing: string;
  0: string[];
  1: string[];
  2: string;
}>;
export type Staked = ContractEventLog<{
  delegator: string;
  intermediary: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokenHubChanged = ContractEventLog<{
  tokenHub: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type UnstakePending = ContractEventLog<{
  claimer: string;
  amount: string;
  0: string;
  1: string;
}>;
export type isRebasing = ContractEventLog<{
  isRebasing: boolean;
  0: boolean;
}>;

export interface BinancePool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BinancePool;
  clone(): BinancePool;
  methods: {
    calcPendingGap(): NonPayableTransactionObject<void>;

    changeBondContract(bondContract: string): NonPayableTransactionObject<void>;

    changeCertContract(certToken: string): NonPayableTransactionObject<void>;

    changeIntermediary(intermediary: string): NonPayableTransactionObject<void>;

    changeTokenHub(tokenHub: string): NonPayableTransactionObject<void>;

    distributeManual(
      id: number | string | BN
    ): NonPayableTransactionObject<void>;

    distributeRewards(): PayableTransactionObject<void>;

    failedStakesAmount(): NonPayableTransactionObject<string>;

    getMinimumStake(): NonPayableTransactionObject<string>;

    getRelayerFee(): NonPayableTransactionObject<string>;

    initialize(
      operator: string,
      bcOperator: string,
      tokenHubAddress: string,
      expireTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    markedForManualDistribute(
      arg0: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    paused(): NonPayableTransactionObject<boolean>;

    pendingClaimerUnstakes(arg0: string): NonPayableTransactionObject<string>;

    pendingGap(): NonPayableTransactionObject<string>;

    pendingUnstakesOf(claimer: string): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    resetPendingGap(): NonPayableTransactionObject<void>;

    setDistributeGasLeft(
      gasLeft: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinimumStake(
      minStake: number | string | BN
    ): NonPayableTransactionObject<void>;

    stake(): PayableTransactionObject<void>;

    stakeAndClaimBonds(): PayableTransactionObject<void>;

    stakeAndClaimBondsWithCode(
      code: number | string | BN
    ): PayableTransactionObject<void>;

    stakeAndClaimCerts(): PayableTransactionObject<void>;

    stakeAndClaimCertsWithCode(
      code: number | string | BN
    ): PayableTransactionObject<void>;

    stashedForManualDistributes(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unstake(amount: number | string | BN): NonPayableTransactionObject<void>;

    unstakeBonds(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    unstakeBondsFor(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    unstakeCerts(
      shares: number | string | BN
    ): NonPayableTransactionObject<void>;

    unstakeCertsFor(
      recipient: string,
      shares: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawFailedStakes(): NonPayableTransactionObject<void>;
  };
  events: {
    BondContractChanged(cb?: Callback<BondContractChanged>): EventEmitter;
    BondContractChanged(
      options?: EventOptions,
      cb?: Callback<BondContractChanged>
    ): EventEmitter;

    CertContractChanged(cb?: Callback<CertContractChanged>): EventEmitter;
    CertContractChanged(
      options?: EventOptions,
      cb?: Callback<CertContractChanged>
    ): EventEmitter;

    DistributeGasLeftChanged(
      cb?: Callback<DistributeGasLeftChanged>
    ): EventEmitter;
    DistributeGasLeftChanged(
      options?: EventOptions,
      cb?: Callback<DistributeGasLeftChanged>
    ): EventEmitter;

    FailedStakesWithdrawn(cb?: Callback<FailedStakesWithdrawn>): EventEmitter;
    FailedStakesWithdrawn(
      options?: EventOptions,
      cb?: Callback<FailedStakesWithdrawn>
    ): EventEmitter;

    IntermediaryChanged(cb?: Callback<IntermediaryChanged>): EventEmitter;
    IntermediaryChanged(
      options?: EventOptions,
      cb?: Callback<IntermediaryChanged>
    ): EventEmitter;

    ManualDistributeExpected(
      cb?: Callback<ManualDistributeExpected>
    ): EventEmitter;
    ManualDistributeExpected(
      options?: EventOptions,
      cb?: Callback<ManualDistributeExpected>
    ): EventEmitter;

    MinimalStakeChanged(cb?: Callback<MinimalStakeChanged>): EventEmitter;
    MinimalStakeChanged(
      options?: EventOptions,
      cb?: Callback<MinimalStakeChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    PendingGapReseted(cb?: Callback<PendingGapReseted>): EventEmitter;
    PendingGapReseted(
      options?: EventOptions,
      cb?: Callback<PendingGapReseted>
    ): EventEmitter;

    Received(cb?: Callback<Received>): EventEmitter;
    Received(options?: EventOptions, cb?: Callback<Received>): EventEmitter;

    ReferralCode(cb?: Callback<ReferralCode>): EventEmitter;
    ReferralCode(
      options?: EventOptions,
      cb?: Callback<ReferralCode>
    ): EventEmitter;

    RewardsDistributed(cb?: Callback<RewardsDistributed>): EventEmitter;
    RewardsDistributed(
      options?: EventOptions,
      cb?: Callback<RewardsDistributed>
    ): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    TokenHubChanged(cb?: Callback<TokenHubChanged>): EventEmitter;
    TokenHubChanged(
      options?: EventOptions,
      cb?: Callback<TokenHubChanged>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    UnstakePending(cb?: Callback<UnstakePending>): EventEmitter;
    UnstakePending(
      options?: EventOptions,
      cb?: Callback<UnstakePending>
    ): EventEmitter;

    isRebasing(cb?: Callback<isRebasing>): EventEmitter;
    isRebasing(options?: EventOptions, cb?: Callback<isRebasing>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BondContractChanged", cb: Callback<BondContractChanged>): void;
  once(
    event: "BondContractChanged",
    options: EventOptions,
    cb: Callback<BondContractChanged>
  ): void;

  once(event: "CertContractChanged", cb: Callback<CertContractChanged>): void;
  once(
    event: "CertContractChanged",
    options: EventOptions,
    cb: Callback<CertContractChanged>
  ): void;

  once(
    event: "DistributeGasLeftChanged",
    cb: Callback<DistributeGasLeftChanged>
  ): void;
  once(
    event: "DistributeGasLeftChanged",
    options: EventOptions,
    cb: Callback<DistributeGasLeftChanged>
  ): void;

  once(
    event: "FailedStakesWithdrawn",
    cb: Callback<FailedStakesWithdrawn>
  ): void;
  once(
    event: "FailedStakesWithdrawn",
    options: EventOptions,
    cb: Callback<FailedStakesWithdrawn>
  ): void;

  once(event: "IntermediaryChanged", cb: Callback<IntermediaryChanged>): void;
  once(
    event: "IntermediaryChanged",
    options: EventOptions,
    cb: Callback<IntermediaryChanged>
  ): void;

  once(
    event: "ManualDistributeExpected",
    cb: Callback<ManualDistributeExpected>
  ): void;
  once(
    event: "ManualDistributeExpected",
    options: EventOptions,
    cb: Callback<ManualDistributeExpected>
  ): void;

  once(event: "MinimalStakeChanged", cb: Callback<MinimalStakeChanged>): void;
  once(
    event: "MinimalStakeChanged",
    options: EventOptions,
    cb: Callback<MinimalStakeChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "PendingGapReseted", cb: Callback<PendingGapReseted>): void;
  once(
    event: "PendingGapReseted",
    options: EventOptions,
    cb: Callback<PendingGapReseted>
  ): void;

  once(event: "Received", cb: Callback<Received>): void;
  once(event: "Received", options: EventOptions, cb: Callback<Received>): void;

  once(event: "ReferralCode", cb: Callback<ReferralCode>): void;
  once(
    event: "ReferralCode",
    options: EventOptions,
    cb: Callback<ReferralCode>
  ): void;

  once(event: "RewardsDistributed", cb: Callback<RewardsDistributed>): void;
  once(
    event: "RewardsDistributed",
    options: EventOptions,
    cb: Callback<RewardsDistributed>
  ): void;

  once(event: "Staked", cb: Callback<Staked>): void;
  once(event: "Staked", options: EventOptions, cb: Callback<Staked>): void;

  once(event: "TokenHubChanged", cb: Callback<TokenHubChanged>): void;
  once(
    event: "TokenHubChanged",
    options: EventOptions,
    cb: Callback<TokenHubChanged>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "UnstakePending", cb: Callback<UnstakePending>): void;
  once(
    event: "UnstakePending",
    options: EventOptions,
    cb: Callback<UnstakePending>
  ): void;

  once(event: "isRebasing", cb: Callback<isRebasing>): void;
  once(
    event: "isRebasing",
    options: EventOptions,
    cb: Callback<isRebasing>
  ): void;
}
