/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ChangeCeToken = ContractEventLog<{
  ceToken: string;
  0: string;
}>;
export type ChangeCollateralToken = ContractEventLog<{
  collateralToken: string;
  0: string;
}>;
export type ChangeDao = ContractEventLog<{
  dao: string;
  0: string;
}>;
export type ChangeMasterVault = ContractEventLog<{
  masterVault: string;
  0: string;
}>;
export type ChangeProxy = ContractEventLog<{
  auctionProxy: string;
  0: string;
}>;
export type Claim = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Deposit = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Withdrawal = ContractEventLog<{
  owner: string;
  recipient: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type WithdrawalInToken = ContractEventLog<{
  owner: string;
  recipient: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Provider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Provider;
  clone(): Provider;
  methods: {
    _ceToken(): NonPayableTransactionObject<string>;

    _certToken(): NonPayableTransactionObject<string>;

    _collateralToken(): NonPayableTransactionObject<string>;

    _dao(): NonPayableTransactionObject<string>;

    _masterVault(): NonPayableTransactionObject<string>;

    _operator(): NonPayableTransactionObject<string>;

    _pool(): NonPayableTransactionObject<string>;

    _proxy(): NonPayableTransactionObject<string>;

    balanceOfToken(strategy: string): NonPayableTransactionObject<string>;

    changeCeToken(ceToken: string): NonPayableTransactionObject<void>;

    changeCollateralToken(
      collateralToken: string
    ): NonPayableTransactionObject<void>;

    changeDao(dao: string): NonPayableTransactionObject<void>;

    changeMasterVault(masterVault: string): NonPayableTransactionObject<void>;

    changeProxy(auctionProxy: string): NonPayableTransactionObject<void>;

    daoBurn(
      account: string,
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    daoMint(
      account: string,
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    estimateInToken(
      strategy: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    initialize(
      collateralToken: string,
      masterVault: string,
      ceToken: string,
      daoAddress: string
    ): NonPayableTransactionObject<void>;

    liquidation(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    provide(): PayableTransactionObject<string>;

    release(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    releaseInToken(
      strategy: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unPause(): NonPayableTransactionObject<void>;
  };
  events: {
    ChangeCeToken(cb?: Callback<ChangeCeToken>): EventEmitter;
    ChangeCeToken(
      options?: EventOptions,
      cb?: Callback<ChangeCeToken>
    ): EventEmitter;

    ChangeCollateralToken(cb?: Callback<ChangeCollateralToken>): EventEmitter;
    ChangeCollateralToken(
      options?: EventOptions,
      cb?: Callback<ChangeCollateralToken>
    ): EventEmitter;

    ChangeDao(cb?: Callback<ChangeDao>): EventEmitter;
    ChangeDao(options?: EventOptions, cb?: Callback<ChangeDao>): EventEmitter;

    ChangeMasterVault(cb?: Callback<ChangeMasterVault>): EventEmitter;
    ChangeMasterVault(
      options?: EventOptions,
      cb?: Callback<ChangeMasterVault>
    ): EventEmitter;

    ChangeProxy(cb?: Callback<ChangeProxy>): EventEmitter;
    ChangeProxy(
      options?: EventOptions,
      cb?: Callback<ChangeProxy>
    ): EventEmitter;

    Claim(cb?: Callback<Claim>): EventEmitter;
    Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    Withdrawal(cb?: Callback<Withdrawal>): EventEmitter;
    Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter;

    WithdrawalInToken(cb?: Callback<WithdrawalInToken>): EventEmitter;
    WithdrawalInToken(
      options?: EventOptions,
      cb?: Callback<WithdrawalInToken>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ChangeCeToken", cb: Callback<ChangeCeToken>): void;
  once(
    event: "ChangeCeToken",
    options: EventOptions,
    cb: Callback<ChangeCeToken>
  ): void;

  once(
    event: "ChangeCollateralToken",
    cb: Callback<ChangeCollateralToken>
  ): void;
  once(
    event: "ChangeCollateralToken",
    options: EventOptions,
    cb: Callback<ChangeCollateralToken>
  ): void;

  once(event: "ChangeDao", cb: Callback<ChangeDao>): void;
  once(
    event: "ChangeDao",
    options: EventOptions,
    cb: Callback<ChangeDao>
  ): void;

  once(event: "ChangeMasterVault", cb: Callback<ChangeMasterVault>): void;
  once(
    event: "ChangeMasterVault",
    options: EventOptions,
    cb: Callback<ChangeMasterVault>
  ): void;

  once(event: "ChangeProxy", cb: Callback<ChangeProxy>): void;
  once(
    event: "ChangeProxy",
    options: EventOptions,
    cb: Callback<ChangeProxy>
  ): void;

  once(event: "Claim", cb: Callback<Claim>): void;
  once(event: "Claim", options: EventOptions, cb: Callback<Claim>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "Withdrawal", cb: Callback<Withdrawal>): void;
  once(
    event: "Withdrawal",
    options: EventOptions,
    cb: Callback<Withdrawal>
  ): void;

  once(event: "WithdrawalInToken", cb: Callback<WithdrawalInToken>): void;
  once(
    event: "WithdrawalInToken",
    options: EventOptions,
    cb: Callback<WithdrawalInToken>
  ): void;
}
