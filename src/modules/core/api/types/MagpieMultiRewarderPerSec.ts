/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OnReward = ContractEventLog<{
  rewardToken: string;
  user: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RewardRateUpdated = ContractEventLog<{
  rewardToken: string;
  oldRate: string;
  newRate: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MagpieMultiRewarderPerSec extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MagpieMultiRewarderPerSec;
  clone(): MagpieMultiRewarderPerSec;
  methods: {
    addRewardToken(
      _rewardToken: string,
      _tokenPerSec: number | string | BN
    ): NonPayableTransactionObject<void>;

    balances(): NonPayableTransactionObject<string[]>;

    emergencyTokenWithdraw(token: string): NonPayableTransactionObject<void>;

    emergencyWithdraw(): NonPayableTransactionObject<void>;

    lastRewardTimestamp(): NonPayableTransactionObject<string>;

    lpToken(): NonPayableTransactionObject<string>;

    masterWombat(): NonPayableTransactionObject<string>;

    onReward(
      _user: string,
      _lpAmount: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    operator(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingTokens(_user: string): NonPayableTransactionObject<string[]>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      rewardToken: string;
      tokenPerSec: string;
      accTokenPerShare: string;
      0: string;
      1: string;
      2: string;
    }>;

    rewardLength(): NonPayableTransactionObject<string>;

    rewardTokens(): NonPayableTransactionObject<string[]>;

    setOperator(_operator: string): NonPayableTransactionObject<void>;

    setRewardRate(
      _tokenId: number | string | BN,
      _tokenPerSec: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    userInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      unpaidRewards: string;
      0: string;
      1: string;
      2: string;
    }>;
  };
  events: {
    OnReward(cb?: Callback<OnReward>): EventEmitter;
    OnReward(options?: EventOptions, cb?: Callback<OnReward>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RewardRateUpdated(cb?: Callback<RewardRateUpdated>): EventEmitter;
    RewardRateUpdated(
      options?: EventOptions,
      cb?: Callback<RewardRateUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OnReward", cb: Callback<OnReward>): void;
  once(event: "OnReward", options: EventOptions, cb: Callback<OnReward>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RewardRateUpdated", cb: Callback<RewardRateUpdated>): void;
  once(
    event: "RewardRateUpdated",
    options: EventOptions,
    cb: Callback<RewardRateUpdated>
  ): void;
}
