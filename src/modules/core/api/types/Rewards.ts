/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface Rewards extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Rewards;
  clone(): Rewards;
  methods: {
    addRewards(
      usr: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    claim(amount: number | string | BN): NonPayableTransactionObject<void>;

    claimable(token: string, usr: string): NonPayableTransactionObject<string>;

    claimedRewards(arg0: string): NonPayableTransactionObject<string>;

    deny(usr: string): NonPayableTransactionObject<void>;

    deposit(token: string, usr: string): NonPayableTransactionObject<void>;

    distributionApy(token: string): NonPayableTransactionObject<string>;

    helioPrice(): NonPayableTransactionObject<string>;

    helioToken(): NonPayableTransactionObject<string>;

    initPool(
      token: string,
      ilk: string | number[],
      rate: number | string | BN
    ): NonPayableTransactionObject<void>;

    live(): NonPayableTransactionObject<string>;

    pendingRewards(usr: string): NonPayableTransactionObject<string>;

    piles(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      ts: string;
      0: string;
      1: string;
    }>;

    pools(arg0: string): NonPayableTransactionObject<{
      rewardRate: string;
      rho: string;
      ilk: string;
      0: string;
      1: string;
      2: string;
    }>;

    poolsList(arg0: number | string | BN): NonPayableTransactionObject<string>;

    rate(token: string): NonPayableTransactionObject<string>;

    rely(usr: string): NonPayableTransactionObject<void>;

    rewardsPool(): NonPayableTransactionObject<string>;

    setHelioToken(helioToken_: string): NonPayableTransactionObject<void>;

    setRate(
      token: string,
      newRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    stop(): NonPayableTransactionObject<void>;

    unrealisedRewards(
      token: string,
      usr: string
    ): NonPayableTransactionObject<string>;

    vat(): NonPayableTransactionObject<string>;

    wards(arg0: string): NonPayableTransactionObject<string>;

    withdraw(token: string, usr: string): NonPayableTransactionObject<void>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;
}
