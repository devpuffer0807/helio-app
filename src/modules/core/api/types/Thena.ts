/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClaimFees = ContractEventLog<{
  from: string;
  claimed0: string;
  claimed1: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Harvest = ContractEventLog<{
  user: string;
  reward: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RewardAdded = ContractEventLog<{
  reward: string;
  0: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface Thena extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Thena;
  clone(): Thena;
  methods: {
    DISTRIBUTION(): NonPayableTransactionObject<string>;

    DURATION(): NonPayableTransactionObject<string>;

    TOKEN(): NonPayableTransactionObject<string>;

    _VE(): NonPayableTransactionObject<string>;

    _balances(arg0: string): NonPayableTransactionObject<string>;

    _periodFinish(): NonPayableTransactionObject<string>;

    _totalSupply(): NonPayableTransactionObject<string>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    claimFees(): NonPayableTransactionObject<{
      claimed0: string;
      claimed1: string;
      0: string;
      1: string;
    }>;

    deposit(amount: number | string | BN): NonPayableTransactionObject<void>;

    depositAll(): NonPayableTransactionObject<void>;

    earned(account: string): NonPayableTransactionObject<string>;

    external_bribe(): NonPayableTransactionObject<string>;

    fees0(): NonPayableTransactionObject<string>;

    fees1(): NonPayableTransactionObject<string>;

    gaugeRewarder(): NonPayableTransactionObject<string>;

    getReward(): NonPayableTransactionObject<void>;

    internal_bribe(): NonPayableTransactionObject<string>;

    isForPair(): NonPayableTransactionObject<boolean>;

    lastTimeRewardApplicable(): NonPayableTransactionObject<string>;

    lastUpdateTime(): NonPayableTransactionObject<string>;

    notifyRewardAmount(
      token: string,
      reward: number | string | BN
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    periodFinish(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardForDuration(): NonPayableTransactionObject<string>;

    rewardPerToken(): NonPayableTransactionObject<string>;

    rewardPerTokenStored(): NonPayableTransactionObject<string>;

    rewardRate(): NonPayableTransactionObject<string>;

    rewardToken(): NonPayableTransactionObject<string>;

    rewarderPid(): NonPayableTransactionObject<string>;

    rewards(arg0: string): NonPayableTransactionObject<string>;

    setDistribution(_distribution: string): NonPayableTransactionObject<void>;

    setGaugeRewarder(_gaugeRewarder: string): NonPayableTransactionObject<void>;

    setRewarderPid(
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    totalSupply(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    userRewardPerTokenPaid(arg0: string): NonPayableTransactionObject<string>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawAll(): NonPayableTransactionObject<void>;

    withdrawAllAndHarvest(): NonPayableTransactionObject<void>;
  };
  events: {
    ClaimFees(cb?: Callback<ClaimFees>): EventEmitter;
    ClaimFees(options?: EventOptions, cb?: Callback<ClaimFees>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RewardAdded(cb?: Callback<RewardAdded>): EventEmitter;
    RewardAdded(
      options?: EventOptions,
      cb?: Callback<RewardAdded>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ClaimFees", cb: Callback<ClaimFees>): void;
  once(
    event: "ClaimFees",
    options: EventOptions,
    cb: Callback<ClaimFees>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RewardAdded", cb: Callback<RewardAdded>): void;
  once(
    event: "RewardAdded",
    options: EventOptions,
    cb: Callback<RewardAdded>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
